/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __RINGBUF_RESERVE_SUBMIT_BPF_SKEL_H__
#define __RINGBUF_RESERVE_SUBMIT_BPF_SKEL_H__

#include <stdlib.h>
#include <bpf/libbpf.h>

struct ringbuf_reserve_submit_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rb;
	} maps;
	struct {
		struct bpf_program *handle_exec;
	} progs;
	struct {
		struct bpf_link *handle_exec;
	} links;
};

static void
ringbuf_reserve_submit_bpf__destroy(struct ringbuf_reserve_submit_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
ringbuf_reserve_submit_bpf__create_skeleton(struct ringbuf_reserve_submit_bpf *obj);

static inline struct ringbuf_reserve_submit_bpf *
ringbuf_reserve_submit_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct ringbuf_reserve_submit_bpf *obj;

	obj = (typeof(obj))calloc(1, sizeof(*obj));
	if (!obj)
		return NULL;
	if (ringbuf_reserve_submit_bpf__create_skeleton(obj))
		goto err;
	if (bpf_object__open_skeleton(obj->skeleton, opts))
		goto err;

	return obj;
err:
	ringbuf_reserve_submit_bpf__destroy(obj);
	return NULL;
}

static inline struct ringbuf_reserve_submit_bpf *
ringbuf_reserve_submit_bpf__open(void)
{
	return ringbuf_reserve_submit_bpf__open_opts(NULL);
}

static inline int
ringbuf_reserve_submit_bpf__load(struct ringbuf_reserve_submit_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct ringbuf_reserve_submit_bpf *
ringbuf_reserve_submit_bpf__open_and_load(void)
{
	struct ringbuf_reserve_submit_bpf *obj;

	obj = ringbuf_reserve_submit_bpf__open();
	if (!obj)
		return NULL;
	if (ringbuf_reserve_submit_bpf__load(obj)) {
		ringbuf_reserve_submit_bpf__destroy(obj);
		return NULL;
	}
	return obj;
}

static inline int
ringbuf_reserve_submit_bpf__attach(struct ringbuf_reserve_submit_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
ringbuf_reserve_submit_bpf__detach(struct ringbuf_reserve_submit_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline int
ringbuf_reserve_submit_bpf__create_skeleton(struct ringbuf_reserve_submit_bpf *obj)
{
	struct bpf_object_skeleton *s;

	s = (typeof(s))calloc(1, sizeof(*s));
	if (!s)
		return -1;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "ringbuf_reserve_submit_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (typeof(s->maps))calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "rb";
	s->maps[0].map = &obj->maps.rb;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (typeof(s->progs))calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "handle_exec";
	s->progs[0].prog = &obj->progs.handle_exec;
	s->progs[0].link = &obj->links.handle_exec;

	s->data_sz = 3304;
	s->data = (void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xa8\x09\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\xbf\x16\0\0\0\0\0\0\x61\x68\x08\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xb7\x02\0\0\x14\x02\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\xbf\x07\
\0\0\0\0\0\0\x15\x07\x11\0\0\0\0\0\x57\x08\0\0\xff\xff\0\0\x85\0\0\0\x0e\0\0\0\
\x77\0\0\0\x20\0\0\0\x63\x07\0\0\0\0\0\0\xbf\x71\0\0\0\0\0\0\x07\x01\0\0\x04\0\
\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x0f\x86\0\0\0\0\0\0\xbf\x71\0\0\
\0\0\0\0\x07\x01\0\0\x14\0\0\0\xb7\x02\0\0\0\x02\0\0\xbf\x63\0\0\0\0\0\0\x85\0\
\0\0\x2d\0\0\0\xbf\x71\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\x84\0\0\0\xb7\
\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\
\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\
\xfc\x01\0\0\xfc\x01\0\0\xd2\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x1b\
\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\
\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\x04\0\0\0\0\0\x02\0\0\x04\x10\0\
\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x2a\0\0\0\0\0\0\
\x0e\x07\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x2d\0\0\0\x05\0\0\x04\x14\
\0\0\0\x50\0\0\0\x0b\0\0\0\0\0\0\0\x54\0\0\0\x0e\0\0\0\x40\0\0\0\x68\0\0\0\x02\
\0\0\0\x60\0\0\0\x6c\0\0\0\x02\0\0\0\x80\0\0\0\x74\0\0\0\x10\0\0\0\xa0\0\0\0\
\x7b\0\0\0\x04\0\0\x04\x08\0\0\0\x19\0\0\0\x0c\0\0\0\0\0\0\0\x87\0\0\0\x0d\0\0\
\0\x10\0\0\0\x8d\0\0\0\x0d\0\0\0\x18\0\0\0\x68\0\0\0\x02\0\0\0\x20\0\0\0\x9b\0\
\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\xaa\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\xb8\
\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xc5\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\
\0\0\0\0\0\0\0\x03\0\0\0\0\x0f\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\
\0\0\0\xca\0\0\0\x09\0\0\0\xce\0\0\0\x01\0\0\x0c\x11\0\0\0\0\0\0\0\0\0\0\x03\0\
\0\0\0\x0f\0\0\0\x04\0\0\0\x0d\0\0\0\xbc\x02\0\0\0\0\0\x0e\x13\0\0\0\x01\0\0\0\
\xc4\x02\0\0\x01\0\0\x0f\0\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\xca\x02\0\0\x01\0\
\0\x0f\0\0\0\0\x14\0\0\0\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\
\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x72\x62\0\x74\x72\x61\x63\x65\
\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x63\x68\x65\x64\x5f\x70\x72\
\x6f\x63\x65\x73\x73\x5f\x65\x78\x65\x63\0\x65\x6e\x74\0\x5f\x5f\x64\x61\x74\
\x61\x5f\x6c\x6f\x63\x5f\x66\x69\x6c\x65\x6e\x61\x6d\x65\0\x70\x69\x64\0\x6f\
\x6c\x64\x5f\x70\x69\x64\0\x5f\x5f\x64\x61\x74\x61\0\x74\x72\x61\x63\x65\x5f\
\x65\x6e\x74\x72\x79\0\x66\x6c\x61\x67\x73\0\x70\x72\x65\x65\x6d\x70\x74\x5f\
\x63\x6f\x75\x6e\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\
\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x75\x6e\x73\x69\x67\
\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x68\x61\x72\0\x63\x74\x78\0\x68\x61\x6e\x64\
\x6c\x65\x5f\x65\x78\x65\x63\0\x74\x70\x2f\x73\x63\x68\x65\x64\x2f\x73\x63\x68\
\x65\x64\x5f\x70\x72\x6f\x63\x65\x73\x73\x5f\x65\x78\x65\x63\0\x2f\x68\x6f\x6d\
\x65\x2f\x79\x75\x6a\x69\x65\x2f\x44\x65\x73\x6b\x74\x6f\x70\x2f\x62\x70\x66\
\x2d\x72\x69\x6e\x67\x62\x75\x66\x2d\x65\x78\x61\x6d\x70\x6c\x65\x73\x2f\x73\
\x72\x63\x2f\x72\x69\x6e\x67\x62\x75\x66\x2d\x72\x65\x73\x65\x72\x76\x65\x2d\
\x73\x75\x62\x6d\x69\x74\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x68\x61\x6e\
\x64\x6c\x65\x5f\x65\x78\x65\x63\x28\x73\x74\x72\x75\x63\x74\x20\x74\x72\x61\
\x63\x65\x5f\x65\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x63\x68\x65\x64\x5f\
\x70\x72\x6f\x63\x65\x73\x73\x5f\x65\x78\x65\x63\x20\x2a\x63\x74\x78\x29\0\x09\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x66\x6e\x61\x6d\x65\x5f\x6f\x66\x66\x20\
\x3d\x20\x63\x74\x78\x2d\x3e\x5f\x5f\x64\x61\x74\x61\x5f\x6c\x6f\x63\x5f\x66\
\x69\x6c\x65\x6e\x61\x6d\x65\x20\x26\x20\x30\x78\x46\x46\x46\x46\x3b\0\x09\x65\
\x20\x3d\x20\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\x73\x65\
\x72\x76\x65\x28\x26\x72\x62\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x2a\x65\x29\
\x2c\x20\x30\x29\x3b\0\x09\x69\x66\x20\x28\x21\x65\x29\0\x09\x65\x2d\x3e\x70\
\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\
\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\
\x09\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\
\x6d\x6d\x28\x26\x65\x2d\x3e\x63\x6f\x6d\x6d\x2c\x20\x73\x69\x7a\x65\x6f\x66\
\x28\x65\x2d\x3e\x63\x6f\x6d\x6d\x29\x29\x3b\0\x09\x62\x70\x66\x5f\x70\x72\x6f\
\x62\x65\x5f\x72\x65\x61\x64\x5f\x73\x74\x72\x28\x26\x65\x2d\x3e\x66\x69\x6c\
\x65\x6e\x61\x6d\x65\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x65\x2d\x3e\x66\x69\
\x6c\x65\x6e\x61\x6d\x65\x29\x2c\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x63\x74\
\x78\x20\x2b\x20\x66\x6e\x61\x6d\x65\x5f\x6f\x66\x66\x29\x3b\0\x09\x62\x70\x66\
\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\x6d\x69\x74\x28\x65\x2c\x20\
\x30\x29\x3b\0\x7d\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x6d\x61\x70\x73\0\x6c\
\x69\x63\x65\x6e\x73\x65\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\
\0\0\xfc\0\0\0\x10\x01\0\0\0\0\0\0\x08\0\0\0\xda\0\0\0\x01\0\0\0\0\0\0\0\x12\0\
\0\0\x10\0\0\0\xda\0\0\0\x0f\0\0\0\0\0\0\0\xf6\0\0\0\x40\x01\0\0\0\x40\0\0\x08\
\0\0\0\xf6\0\0\0\x80\x01\0\0\x1c\x48\0\0\x10\0\0\0\xf6\0\0\0\xb9\x01\0\0\x06\
\x54\0\0\x40\0\0\0\xf6\0\0\0\xe7\x01\0\0\x06\x58\0\0\x48\0\0\0\xf6\0\0\0\0\0\0\
\0\0\0\0\0\x50\0\0\0\xf6\0\0\0\xf0\x01\0\0\x0b\x64\0\0\x58\0\0\0\xf6\0\0\0\xf0\
\x01\0\0\x26\x64\0\0\x60\0\0\0\xf6\0\0\0\xf0\x01\0\0\x09\x64\0\0\x68\0\0\0\xf6\
\0\0\0\x1c\x02\0\0\x1b\x68\0\0\x78\0\0\0\xf6\0\0\0\x1c\x02\0\0\x02\x68\0\0\x88\
\0\0\0\xf6\0\0\0\x4e\x02\0\0\x44\x6c\0\0\x90\0\0\0\xf6\0\0\0\x4e\x02\0\0\x19\
\x6c\0\0\xa0\0\0\0\xf6\0\0\0\x4e\x02\0\0\x02\x6c\0\0\xb8\0\0\0\xf6\0\0\0\x9f\
\x02\0\0\x02\x74\0\0\xd0\0\0\0\xf6\0\0\0\xba\x02\0\0\x01\x7c\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x80\0\0\0\0\0\x03\0\xd0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\x12\0\
\x03\0\0\0\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\x5c\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x78\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\xf4\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x0c\
\x02\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\
\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\0\
\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\0\0\
\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xa0\0\0\0\
\0\0\0\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\0\x01\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x10\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x20\x01\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\x0c\x0e\x0d\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\
\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x6d\x61\x70\x73\0\x2e\x6c\x6c\x76\x6d\
\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\
\x6c\x74\x70\x2f\x73\x63\x68\x65\x64\x2f\x73\x63\x68\x65\x64\x5f\x70\x72\x6f\
\x63\x65\x73\x73\x5f\x65\x78\x65\x63\0\x68\x61\x6e\x64\x6c\x65\x5f\x65\x78\x65\
\x63\0\x72\x62\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\
\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\
\x30\x5f\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x5f\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\x09\0\0\0\0\0\0\x87\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\
\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x34\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xe8\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0c\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\x28\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\
\x01\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x14\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x01\0\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x73\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x01\0\0\0\0\0\0\xe6\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6f\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x07\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x0c\0\
\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x28\x06\0\0\0\0\0\0\x30\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x18\x08\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\x0c\0\0\0\x09\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x1a\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\
\0\0\0\0\0\x18\x09\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x67\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\
\x07\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x18\0\
\0\0\0\0\0\0";

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -1;
}

#endif /* __RINGBUF_RESERVE_SUBMIT_BPF_SKEL_H__ */
